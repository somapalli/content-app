Welcome to our Content Display App!

This is a sample content that can be dynamically injected into the HTML file.

Features:
- Dynamic content loading
- Responsive design
- Easy to update

You can add more content by:
1. Editing this text file
2. Using the "Add Content" button
3. Updating the content through the API

Feel free to customize this content according to your needs! 

-- =========================
-- Lookups & shared
-- =========================
CREATE TABLE addresses (
  address_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  line1           VARCHAR2(200) NOT NULL,
  line2           VARCHAR2(200),
  city            VARCHAR2(100) NOT NULL,
  state_province  VARCHAR2(100),
  postal_code     VARCHAR2(20),
  country_code    VARCHAR2(2)   DEFAULT 'US' CHECK (LENGTH(country_code)=2)
);

CREATE TABLE permission_types (
  permission_code VARCHAR2(40) PRIMARY KEY,
  description     VARCHAR2(200)
);
/* Seed these codes when ready:
   CC_PROCESSING, ACH_PROCESSING, API_ACCESS, VIRTUAL_TERMINAL_ACCESS,
   CC_API, ACH_VT, FUNDING_PUSH, FUNDING_PULL
*/

-- =========================
-- Merchants & relationships
-- =========================
CREATE TABLE merchants (
  merchant_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  legal_name      VARCHAR2(200) NOT NULL,
  dba_name        VARCHAR2(200),
  status          VARCHAR2(20)  DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE','INACTIVE','SUSPENDED')),
  tax_id_token    VARCHAR2(100),             -- store tokens, not raw TIN
  created_at      TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL,
  updated_at      TIMESTAMP
);

CREATE TABLE merchant_relationships (
  relationship_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  parent_merchant_id  NUMBER NOT NULL,
  child_merchant_id   NUMBER NOT NULL,
  relationship_type   VARCHAR2(40) NOT NULL, -- e.g., PARENT_CHILD, BRAND, AGENT
  effective_from      DATE     DEFAULT TRUNC(SYSDATE) NOT NULL,
  effective_to        DATE,
  CONSTRAINT fk_mr_parent FOREIGN KEY (parent_merchant_id) REFERENCES merchants(merchant_id),
  CONSTRAINT fk_mr_child  FOREIGN KEY (child_merchant_id)  REFERENCES merchants(merchant_id),
  CONSTRAINT chk_mr_dates CHECK (effective_to IS NULL OR effective_to >= effective_from),
  CONSTRAINT uq_mr UNIQUE (parent_merchant_id, child_merchant_id, relationship_type, effective_from)
);

-- =========================
-- Contacts & owners
-- =========================
CREATE TABLE contacts (
  contact_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name      VARCHAR2(100) NOT NULL,
  last_name       VARCHAR2(100) NOT NULL,
  email           VARCHAR2(200),
  phone_e164      VARCHAR2(20),              -- +15551234567 format
  address_id      NUMBER,
  CONSTRAINT fk_contact_address FOREIGN KEY (address_id) REFERENCES addresses(address_id),
  CONSTRAINT uq_contact_email UNIQUE (email)
);

CREATE TABLE merchant_contacts (
  merchant_id     NUMBER NOT NULL,
  contact_id      NUMBER NOT NULL,
  role_code       VARCHAR2(40) NOT NULL,     -- e.g., PRIMARY, BILLING, TECH, SUPPORT
  primary_flag    CHAR(1) DEFAULT 'N' CHECK (primary_flag IN ('Y','N')),
  CONSTRAINT pk_merchant_contacts PRIMARY KEY (merchant_id, contact_id, role_code),
  CONSTRAINT fk_mc_m FOREIGN KEY (merchant_id) REFERENCES merchants(merchant_id),
  CONSTRAINT fk_mc_c FOREIGN KEY (contact_id)  REFERENCES contacts(contact_id)
);

CREATE TABLE merchant_owners (
  owner_id            NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  merchant_id         NUMBER NOT NULL,
  contact_id          NUMBER NOT NULL,
  ownership_percent   NUMBER(5,2) CHECK (ownership_percent BETWEEN 0 AND 100),
  beneficial_owner_fl CHAR(1) DEFAULT 'Y' CHECK (beneficial_owner_fl IN ('Y','N')),
  kyc_status          VARCHAR2(20) DEFAULT 'PENDING' CHECK (kyc_status IN ('PENDING','CLEAR','REVIEW','FAILED')),
  start_date          DATE DEFAULT TRUNC(SYSDATE) NOT NULL,
  end_date            DATE,
  CONSTRAINT fk_mo_m FOREIGN KEY (merchant_id) REFERENCES merchants(merchant_id),
  CONSTRAINT fk_mo_c FOREIGN KEY (contact_id)  REFERENCES contacts(contact_id),
  CONSTRAINT chk_mo_dates CHECK (end_date IS NULL OR end_date >= start_date)
);

-- =========================
-- Stores (locations)
-- =========================
CREATE TABLE stores (
  store_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  merchant_id     NUMBER NOT NULL,
  store_name      VARCHAR2(200) NOT NULL,
  store_code      VARCHAR2(50),              -- human/ops code if you use one
  active_flag     CHAR(1) DEFAULT 'Y' CHECK (active_flag IN ('Y','N')),
  opened_at       DATE,
  closed_at       DATE,
  created_at      TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT fk_store_merchant FOREIGN KEY (merchant_id) REFERENCES merchants(merchant_id),
  CONSTRAINT chk_store_dates CHECK (closed_at IS NULL OR closed_at >= opened_at)
);

CREATE TABLE store_misc (
  store_id        NUMBER PRIMARY KEY,
  dba_name        VARCHAR2(200),
  address_id      NUMBER NOT NULL,
  mcc             VARCHAR2(4),               -- merchant category code
  timezone        VARCHAR2(64),
  website_url     VARCHAR2(200),
  CONSTRAINT fk_sm_store   FOREIGN KEY (store_id)   REFERENCES stores(store_id),
  CONSTRAINT fk_sm_address FOREIGN KEY (address_id) REFERENCES addresses(address_id)
);

-- =========================
-- Store permissions (feature toggles)
-- =========================
CREATE TABLE store_permissions (
  store_id         NUMBER NOT NULL,
  permission_code  VARCHAR2(40) NOT NULL,
  enabled_flag     CHAR(1) DEFAULT 'N' CHECK (enabled_flag IN ('Y','N')),
  effective_from   DATE DEFAULT TRUNC(SYSDATE) NOT NULL,
  effective_to     DATE,
  source_system    VARCHAR2(60),             -- who set it (ops/ui/api)
  CONSTRAINT pk_store_permissions PRIMARY KEY (store_id, permission_code, effective_from),
  CONSTRAINT fk_sp_store FOREIGN KEY (store_id) REFERENCES stores(store_id),
  CONSTRAINT fk_sp_type  FOREIGN KEY (permission_code) REFERENCES permission_types(permission_code),
  CONSTRAINT chk_sp_dates CHECK (effective_to IS NULL OR effective_to >= effective_from)
);

-- =========================
-- Store risk (limits & holds)
-- =========================
CREATE TABLE store_risk_profiles (
  risk_profile_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  store_id                 NUMBER NOT NULL,
  currency_code            VARCHAR2(3) DEFAULT 'USD',
  monthly_limit_cc_cp      NUMBER(18,2),      -- card-present monthly hard limit
  monthly_limit_cc_cnp     NUMBER(18,2),      -- card-not-present monthly hard limit
  per_txn_limit_cc_cp      NUMBER(18,2),
  per_txn_limit_cc_cnp     NUMBER(18,2),
  hold_days_cp             NUMBER(3),         -- settlement hold days CP
  hold_days_cnp            NUMBER(3),         -- settlement hold days CNP
  risk_tier                VARCHAR2(20),      -- e.g., LOW/MED/HIGH
  notes                    VARCHAR2(400),
  effective_from           DATE DEFAULT TRUNC(SYSDATE) NOT NULL,
  effective_to             DATE,
  active_flag              CHAR(1) DEFAULT 'Y' CHECK (active_flag IN ('Y','N')),
  CONSTRAINT fk_srp_store FOREIGN KEY (store_id) REFERENCES stores(store_id),
  CONSTRAINT chk_srp_dates CHECK (effective_to IS NULL OR effective_to >= effective_from)
);

-- =========================
-- Terminals
-- =========================
CREATE TABLE terminals (
  terminal_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  store_id        NUMBER NOT NULL,
  serial_number   VARCHAR2(100) NOT NULL,
  model           VARCHAR2(100),
  manufacturer    VARCHAR2(100),
  status          VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE','INACTIVE','RETIRED','LOST')),
  activation_date DATE,
  deactivated_at  DATE,
  CONSTRAINT fk_term_store FOREIGN KEY (store_id) REFERENCES stores(store_id),
  CONSTRAINT uq_term_serial UNIQUE (serial_number),
  CONSTRAINT chk_term_dates CHECK (deactivated_at IS NULL OR deactivated_at >= activation_date)
);

-- =========================
-- Users & store assignments
-- =========================
CREATE TABLE users (
  user_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name     VARCHAR2(100) NOT NULL,
  last_name      VARCHAR2(100) NOT NULL,
  email          VARCHAR2(200) NOT NULL,
  phone_e164     VARCHAR2(20),
  status         VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (status IN ('ACTIVE','LOCKED','DISABLED')),
  created_at     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT uq_users_email UNIQUE (email)
);

CREATE TABLE store_users (
  store_id       NUMBER NOT NULL,
  user_id        NUMBER NOT NULL,
  role_code      VARCHAR2(40) NOT NULL,      -- e.g., OWNER, MANAGER, CASHIER, ANALYST
  active_flag    CHAR(1) DEFAULT 'Y' CHECK (active_flag IN ('Y','N')),
  granted_at     TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  revoked_at     TIMESTAMP,
  CONSTRAINT pk_store_users PRIMARY KEY (store_id, user_id, role_code),
  CONSTRAINT fk_su_store FOREIGN KEY (store_id) REFERENCES stores(store_id),
  CONSTRAINT fk_su_user  FOREIGN KEY (user_id)  REFERENCES users(user_id)
);

-- =========================
-- Store funding
-- =========================
CREATE TABLE funding_accounts (
  funding_account_id  NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  store_id            NUMBER NOT NULL,
  dda_name            VARCHAR2(200) NOT NULL,      -- account display name
  account_type        VARCHAR2(20) NOT NULL CHECK (account_type IN ('CHECKING','SAVINGS','OTHER')),
  ownership_type      VARCHAR2(20) NOT NULL CHECK (ownership_type IN ('INDIVIDUAL','JOINT','BUSINESS','TRUST','OTHER')),
  bank_name           VARCHAR2(200),
  routing_token       VARCHAR2(100),               -- tokenize sensitive data
  account_last4       VARCHAR2(4),
  verification_status VARCHAR2(20) DEFAULT 'PENDING' CHECK (verification_status IN ('PENDING','VERIFIED','FAILED')),
  primary_flag        CHAR(1) DEFAULT 'N' CHECK (primary_flag IN ('Y','N')),
  created_at          TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  updated_at          TIMESTAMP,
  CONSTRAINT fk_fa_store FOREIGN KEY (store_id) REFERENCES stores(store_id)
);

-- =========================
-- Helpful indexes
-- =========================
CREATE INDEX ix_store_merchant       ON stores(merchant_id);
CREATE INDEX ix_sp_store             ON store_permissions(store_id);
CREATE INDEX ix_srp_store_active     ON store_risk_profiles(store_id, active_flag);
CREATE INDEX ix_term_store           ON terminals(store_id);
CREATE INDEX ix_su_user              ON store_users(user_id);
CREATE INDEX ix_fa_store_primary     ON funding_accounts(store_id, primary_flag);
