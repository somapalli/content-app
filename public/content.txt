Welcome to our Content Display App!

This is a sample content that can be dynamically injected into the HTML file.

Features:
- Dynamic content loading
- Responsive design
- Easy to update

You can add more content by:
1. Editing this text file
2. Using the "Add Content" button
3. Updating the content through the API

Feel free to customize this content according to your needs! 

// LOOKUPS

Table pricing_method {
  method_id int [pk, note: "Identity/PK"]
  method_code varchar [unique, not null, note: "Stable code, e.g., INTERCHANGE_PLUS, BLENDED"]
  method_name varchar
  Note: "Reference: pricing models"
}

Table card_type {
  card_type_id int [pk, note: "Identity/PK"]
  card_code varchar [unique, not null, note: "'VISA','MC','AMEX','DISC','DEBIT'"]
  card_name varchar
  Note: "Reference: card brands/types"
}

Table cost_basis {
  basis_id int [pk, note: "Identity/PK"]
  basis_code varchar [unique, not null, note: "'PERCENT','PER_TXN'"]
  basis_name varchar
  Note: "Reference: how an amount is interpreted"
}

Table fee_type {
  fee_type_id int [pk, note: "Identity/PK"]
  fee_code varchar [unique, not null, note: "'REFUND','ACH_RETURN','CHARGEBACK','RETRIEVAL',..."]
  fee_name varchar
  Note: "Reference: event/penalty fee types"
}

Table transaction_type {
  transaction_type_id int [pk, note: "Identity/PK"]
  type_code varchar [unique, not null, note: "'CP', 'CNP'"]
  type_name varchar [not null, note: "'Card Present', 'Card Not Present'"]
  Note: "Reference: Transaction channel (Card Present vs. Card Not Present)"
}



// CORE

Table merchant {
  merchant_id int [pk, note: "Identity/PK"]
  merchant_code varchar [unique]
  name varchar [not null]
  status varchar [default: 'ACTIVE']
  created_at timestamp [default: "now"]
  updated_at timestamp
  Note: "One row per merchant (tenant/customer)"
}

Table merchant_pricing_profile {
  profile_id int [pk, note: "Identity/PK"]
  merchant_id int [ref: > merchant.merchant_id, not null]
  method_id int [ref: > pricing_method.method_id, not null]
  currency_code char [default: 'USD']
  effective_from date [not null]
  effective_to date
  created_at timestamp [default: "now"]
  updated_at timestamp
  Note: "Links merchant to pricing method; markup is conditional; card rates are per card"
  Indexes {
    (merchant_id) [unique, name: "uq_pricing_profile_one_per_merchant"]
  }
}

Table merchant_markup {
  markup_id int [pk, note: "Identity/PK"]
  profile_id int [ref: > merchant_pricing_profile.profile_id, not null]
  transaction_type_id int [ref: > transaction_type.transaction_type_id, not null]
  basis_id int [ref: > cost_basis.basis_id, not null]
  amount decimal [not null]
  created_at timestamp [default: "now"]
  updated_at timestamp
  Note: "Conditional universal markup for a pricing profile (applies to all card types)"
  Indexes {
    (profile_id, basis_id, transaction_type_id) [unique, name: "uq_profile_markup_basis_txn"]
  }
}

Table merchant_card_rate {
  rate_id int [pk]
  profile_id int [ref: > merchant_pricing_profile.profile_id, not null]
  card_type_id int [ref: > card_type.card_type_id, not null]
  transaction_type_id int [ref: > transaction_type.transaction_type_id, not null]
  rate_percent_id int 
  rate_per_txn_id int 
  effective_from date
  effective_to date
  created_at timestamp
  updated_at timestamp
  Note: "Each card rate references both percent and per-txn rate_value rows, which in turn reference cost_basis."
  Indexes {
    (profile_id, card_type_id, transaction_type_id) [unique, name: "uq_card_rate_profile_card_txn"]
  }
}

Table merchant_fee {
  merchant_fee_id int [pk, note: "Identity/PK"]
  profile_id int [ref: > merchant_pricing_profile.profile_id, not null]
  fee_type_id int [ref: > fee_type.fee_type_id, not null]
  basis_id int [ref: > cost_basis.basis_id, not null]
  amount decimal [not null]
  currency_code char [default: 'USD']
  effective_from date [not null]
  effective_to date
  created_at timestamp [default: "now"]
  updated_at timestamp
  Note: "Required event fees per merchant (e.g., refund, ACH return, chargeback)"
  Indexes {
    (fee_type_id, effective_from) [unique, name: "uq_merchant_fee_type_from"]
  }
}